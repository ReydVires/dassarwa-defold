local last_score = 0
local Button = require "main/gui_button"

local function create_scale_button(node, callback)
	return Button.create(node, callback)
end

local function count_score(display)
	local total_score = 0
	for i, v in ipairs(scores) do
		if display then
			print("score [level 1-"..i.."] : ", v)
		end
		total_score = total_score + v
	end
	return total_score
end

local function set_score_text(self)
	local result = count_score(true)
	print("total score: ",result)
	gui.set_text(gui.get_node("score_text"), result)
end

function init(self)
	-- acquire_input_focus is on from fading
	sound.play("loader:/go_audio#bg_menu") -- title sound
	
	msg.post("/go_main_menu#fading", "do_fade_in")
	gui.set_enabled(gui.get_node("new_score_text"), false)
	gui.set_enabled(gui.get_node("dim_bg/bg"), false)
	gui.animate(gui.get_node("tap_box"), "color.w", 0.5, gui.EASING_OUTSINE, 0.8, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	local credit_node = gui.get_node("credit_box")
	self.about_btn = create_scale_button(gui.get_node("about/btn_node"), function()
		self.credit_active = true
		gui.set_enabled(gui.get_node("dim_bg/bg"), true)
		gui.animate(credit_node, "position.y", 240, gui.EASING_INSINE, 0.3, 0, function()
			gui.set_enabled(gui.get_node("back/btn_node"), true)
		end)
	end)	
	self.back_btn = create_scale_button(gui.get_node("back/btn_node"), function()
		self.tap_once = true
		gui.animate(credit_node, "position.y", -160, gui.EASING_OUTSINE, 0.3, 0, function()
			gui.set_enabled(gui.get_node("dim_bg/bg"), false)
			self.credit_active = false
			gui.animate(gui.get_node("back/btn_node"), "scale", vmath.vector3(1, 1, 1), gui.EASING_LINEAR, 0.01)
			self.back_btn.enable(false)
			self.tap_once = false
		end)
	end)
	self.back_btn.set_sound("loader:/go_audio#cancel")
	self.back_btn.enable(false)
	set_score_text(self)
end

function on_input(self, action_id, action)
	if not self.credit_active then
		self.about_btn.on_input(action_id, action)
	end
	if not self.tap_once then
		self.back_btn.on_input(action_id, action)
	end
	if action_id == hash("touch") and action.pressed then
		-- tap in over button area?
		if not self.credit_active and not self.about_btn.on_input(action_id, action) and 
		not self.back_btn.on_input(action_id, action) and action.x <= 400 then
			last_score = count_score()
			gui.set_enabled(gui.get_node("new_score_text"), false)
			sound.play("loader:/go_audio#execuse")
			msg.post("loader:/go_loader#script", "goto_level")
			msg.post(".", "release_input_focus")
			print "goto level.collection"
		end
	end
	if (action_id == hash("esc") or action_id == hash("back")) and action.pressed then
		if not self.credit_active then
			msg.post("#", "quit")
		--else
			--msg.post("loader:/go_loader#script", "delete_data") -- do delete data
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("quit") then
		print "exit app"
		msg.post("@system:", "exit", {code = 0})
		--os.exit(0)
	end
	-- @from level.gui_level
	if message_id == hash("update_score_text") then
		if count_score() > last_score then
			print "NEW HIGHSCORE, BANZAII!"
			gui.set_enabled(gui.get_node("new_score_text"), true)
		else
			print "NO NEW HIGHSCORE!"
		end
		set_score_text(self)
	end
end